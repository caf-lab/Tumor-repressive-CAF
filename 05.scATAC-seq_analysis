# File path: /home/hero/data1/CAF-lab/Database/SHK-2023/03.2.GSE201336
# File name: /script/02.scATAC_fbst2_SE_SHK.2023_9_6.R

# Reference data: GSE201336

#------------------------------------------------------------------------------------------#
#                                                                                          #
#                 Installing and loading R packages for scATAC-seq analysis                #
#                                                                                          #
#------------------------------------------------------------------------------------------#
library(ArchR)
library(Seurat)
library(BSgenome.Hsapiens.UCSC.hg38)
library(pathviewr)
library(GenomicRanges)
library(plyranges)
library(dplyr)
library(ggrepel)

setwd("./projects/")
addArchRGenome("hg38")  # Load Genome Annotations
addArchRThreads(20) # Set Threads to be used
`%notin%` <- Negate(`%in%`)

# Things to set for subseting projects
subscript = "fbst"
new_project_save_name <- "save.proj.Fbst2.SE"
use_Regev_RNA <- FALSE
# Define the steps above you want to execute
execute_steps <- c(0,1,2,3,4,5)

#------------------------------------------------------------------------------------------#
#                                                                                          #
#                 Loading pre-processed scATAC-seq data (GSE201336)                        #
#                                                                                          #
#------------------------------------------------------------------------------------------#
# To execute this code segment, pre-processed files located in the "save.proj.Fbst2" folder are necessary. 
# Due to the substantial size of these files (160 GB), internet transfer is impractical. 
# Kindly send an empty portable hard drive to Seok-Hyung Kim, M.D. 
# I will populate the drive with the required files and promptly return it.

if (0 %in% execute_steps){
    # Load previously proproceesed archR project
    proj_fbst <- loadArchRProject(path = "./save.proj.Fbst2/")    
    # Define subset to explore
    idxSample <- BiocGenerics::which(getCellColData(proj_fbst, "CellType") %in% 
                                       c("Cancer Associated Fibroblasts", 
                                         "Crypt Fibroblasts 1", 
                                         "Crypt Fibroblasts 2", 
                                         "Crypt Fibroblasts 3",
                                         "Crypt Fibroblasts 4", 
                                         "Villus Fibroblasts WNT5B+",
                                         "Myofibroblasts/Smooth Mucle 1"))
    cellsSample <- proj_fbst$cellNames[idxSample[["CellType"]]]   #17386

    proj_fbst2 <- subsetArchRProject(
      ArchRProj = proj_fbst,
      cells = cellsSample,
      outputDirectory = new_project_save_name, dropCells = FALSE
    )

    proj_fbst2 <- loadArchRProject(path = new_project_save_name)
}


#------------------------------------------------------------------------------------------#
#                                                                                          #
#               Identification of Group D fibroblast-specific ATAC peaks and               #
#                      their associated differentially expressed genes.                    #
#                                                                                          #
#------------------------------------------------------------------------------------------#
# Identification of ATAC peaks and their associated genes using getPeak2GeneLinks function 
if (1 %in% execute_steps){
  p2g_link <- getPeak2GeneLinks(
    ArchRProj = proj_fbst2, 
    corCutOff = 0.45,
    varCutOffRNA = 0.25,
    FDRCutOff = 1E-4,
    resolution = 1,
    returnLoops = F)

  # Identification of Group D fibroblast-specific ATAC peaks
  GroupD_markerTestSub <- getMarkerFeatures(
    ArchRProj = proj_fbst2, 
    useMatrix = "PeakMatrix",
    groupBy = "ABCDtype",
    testMethod = "wilcoxon",
    bias = c("TSSEnrichment", "log10(nFrags)"),
    useGroups = "D")
  
  markerList <- getMarkers(GroupD_markerTestSub, cutOff = "FDR <= 0.01 & Log2FC >= 1")
  Group_D_markerList_df <- markerList$`D`
  
  # Acqusition of gene names of ATAC peak associated genes
  p2geneDF <- metadata(proj_fbst2@peakSet)$Peak2GeneLinks
  p2geneDF$geneName <- mcols(metadata(p2geneDF)$geneSet)$name[p2geneDF$idxRNA]
  p2geneDF$peakName <- (metadata(p2geneDF)$peakSet %>% {paste0(seqnames(.), "_", start(.), "_", end(.))})[p2geneDF$idxATAC]
  
  p2geneDF_transform <- data.frame( seqnames = sapply( strsplit(p2geneDF$peakName, "_"), function(x) x[1]),
                                    start = sapply( strsplit(p2geneDF$peakName, "_"), function(x) x[2]),
                                    end = sapply( strsplit(p2geneDF$peakName, "_"), function(x) x[3]) )
    p2geneDF_transform$idxATAC <- p2geneDF$idxATAC
  p2geneDF_transform$idxRNA <- p2geneDF$idxRNA
    p2geneDF_transform_gr <- p2geneDF_transform %>% makeGRangesFromDataFrame(keep.extra.columns = T)
  
  GroupD_gr <- Group_D_markerList_df %>% as.data.frame() %>% 
    dplyr::select(seqnames, start, end) %>% makeGRangesFromDataFrame(keep.extra.columns = T)
  GroupD_gr_filter <- join_overlap_left(GroupD_gr, p2geneDF_transform_gr )
  GroupD_gr_marker_gene_idx <- GroupD_gr_filter$idxRNA %>% unique %>% as.numeric()
  
  # Identification of gene names associated with Group D fibroblast specific ATAC peaks
  GroupD_p2g_link <- p2g_link %>% data.frame %>% dplyr::filter(idxRNA %in% GroupD_gr_marker_gene_idx)
  GroupD_p2g_link_tbl <- GroupD_p2g_link$idxRNA %>% table %>% data.frame %>% arrange(-Freq)
  colnames(GroupD_p2g_link_tbl) <- c("idxRNA", "Freq")

  
#------------------------------------------------------------------------------------------#
#                                                                                          #
#       Vidualizing the distribution of Group D-specific ATAC peak-correlated genes        #
#                     depending on the number of their associated ATAC peaks               #
#                                                                                          #
#------------------------------------------------------------------------------------------#
# elbow plot -1 
  df <- data.frame(x = seq(length(GroupD_p2g_link_tbl$Freq)),
                   y = GroupD_p2g_link_tbl$Freq)
  plot(df)
}

if (2 %in% execute_steps){
  # compute "slope > 1 "
  pathviewr::find_curve_elbow(df, plot_curve = F)   #458   --> Freq:17
}

# elbow plot -2 
if (3 %in% execute_steps){
  GroupD_p2g_link_tbl_filter <- dplyr::filter(GroupD_p2g_link_tbl, Freq >=17)
  p2geneDF_df <- p2geneDF %>% data.frame
  GroupD_p2g_link_tbl_filter$idxRNA <- GroupD_p2g_link_tbl_filter$idxRNA %>% 
    as.character() %>% as.numeric
  p2geneDF_final <- data.frame(idxRNA=p2geneDF$idxRNA,
                               geneName=p2geneDF$geneName) %>% 
    dplyr::distinct(idxRNA, .keep_all = T) %>% 
    arrange(idxRNA)
  GroupD_final_SE_list <- inner_join(GroupD_p2g_link_tbl_filter, p2geneDF_final, by ="idxRNA")
  GroupD_final_SE_list

  GroupD_final_SE_list[GroupD_final_SE_list$geneName == "ADAMDEC1",]
  GroupD_final_SE_list[GroupD_final_SE_list$geneName == "CXCL14",]
  
  p2geneDF_gene <- p2geneDF %>% data.frame %>% dplyr::select(idxRNA, geneName) %>% 
    distinct(idxRNA, .keep_all = T) %>% arrange(idxRNA) %>% pull(geneName)
  
  sum( GroupD_p2g_link_tbl_filter$GeneIDX == 17057 )
  
  # SE_genes <- p2geneDF_gene[GroupD_p2g_link_tbl_filter$GeneIDX]
  SE_genes <- p2geneDF_gene[GroupD_p2g_link_tbl_filter$idxRNA]
  p2geneDF_gene[17057]
  p2geneDF %>% data.frame %>% dplyr::filter( idxRNA == 17057 )
  
  GroupD_DEG <- read.csv("./03.B_specific_DEG.CSV") %>% rename('symbol'='X')
  intersect( GroupD_DEG$symbol, GroupD_final_SE_list$geneName )
}

# elbow plot -3 
if (4 %in% execute_steps){
  #define function to scale values between 0 and 1
  scale_values <- function(x){(x-min(x))/(max(x)-min(x))}
 
  GroupD_p2g_link_tbl$idxRNA <- GroupD_p2g_link_tbl$idxRNA %>% as.character() %>% as.numeric
  GroupD_final_enhancer <- inner_join(GroupD_p2g_link_tbl, p2geneDF_final, by ="idxRNA")
  
  GroupD_final_enhancer$Freq_scale <- scale_values(GroupD_final_enhancer$Freq )
  GroupD_final_enhancer$Rank <- seq( dim(GroupD_final_enhancer)[1] )
  
  GroupD_final_enhancer <- GroupD_final_enhancer %>% 
    mutate( Color= ifelse( Freq >= 17, "selected", "out") )
  
  Label_gene <- intersect( GroupD_final_enhancer$geneName, 
                           intersect( GroupD_DEG$symbol, GroupD_final_SE_list$geneName ) )
  GroupD_final_enhancer$GeneName_filter <- ifelse( GroupD_final_enhancer$geneName %in% Label_gene, 
                                                   GroupD_final_enhancer$geneName, "")
  
  pal <- c("#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD", "#8C564B", "#E377C2", "#7F7F7F", "#BCBD22", "#17BECF")
  
  ggplot(GroupD_final_enhancer, aes(x=-Rank, y=Freq_scale, color=Color))+ 
    geom_point()+scale_color_manual(values = c("#1F77B4", "#D62728"))+
    geom_text_repel(aes(label = GeneName_filter), max.overlaps = Inf) +
    theme(legend.position= "none", 
          axis.text.x = element_text(face = "bold", color = "black"),
          axis.text.y = element_text(hjust = 1, face = "bold", color = "black"),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = 0.5), 
          panel.background =element_blank(),
          axis.title = element_text(face = "bold",size = rel(1)), 
          axis.line = element_line(colour="black", size = .8),
          panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"))
}

#### ------------For Figure, additional code -----------------#############################
if (5 %in% execute_steps){
  GroupD_final_enhancer$geneName2 <- c( GroupD_final_SE_list$geneName, rep(NA, 4055) )
  # length(GroupD_final_SE_list$geneName) --> 495
  # dim(GroupD_final_enhancer)  --> 4550    7
  # 4550 - 495 = 3804
  GroupD_final_enhancer$selected_geneNames <- ifelse(
    GroupD_final_enhancer$geneName2 %in% GroupD_DEG$symbol, GroupD_final_enhancer$geneName2, NA)
  GroupD_final_enhancer$Color2 <- c( rep("SE", 495), rep("Other", 4055) )
  GroupD_final_enhancer$selected_geneNames2 <- ifelse(GroupD_final_enhancer$geneName2 %in% 
                                                        c("TNS1", "F3", "PRELP", "GADD45G", "FBN1", "CXCL14", 
                                                          "CCL8", "FOXF1", "FBLN1", "MATN2","ADAM28", "BMP4", 
                                                          "ADAMDEC1", "HSD17B2", "FBLN2", "COL14A1", "EDNRB", 
                                                          "APOE", "FABP5", "SOX6", "BMP5", "C3"),
                                                           GroupD_final_enhancer$geneName2, NA)
  intersect(GroupD_final_SE_list$geneName, GroupD_DEG$symbol)

  library(VennDiagram)
  library(venn)
  # Generate 3 sets of 200 words
  set1 <- GroupD_final_SE_list$geneName
  set2 <- GroupD_DEG$symbol
  
   # Chart
  venn.diagram(
    x = list(set1, set2 ),
    category.names = c("SE", "Markers_genes_DEGs"),
    filename = '../result/2023_09_06/venn_diagramm-1.pdf',
    output=TRUE
  )
  
  require(gmp)
  
  enrich_pvalue <- function(N, A, B, k)
  {
    m <- A + k
    n <- B + k
    i <- k:min(m,n)
    
    as.numeric( sum(chooseZ(m,i)*chooseZ(N-m,n-i))/chooseZ(N,n) )
  }

  venn(x = list(set1, set2 ), lty=5, col="navyblue", zcolor="style")
 
  ggplot(GroupD_final_enhancer, aes(x=-Rank, y=Freq_scale, color=Color2))+ 
    geom_point()+scale_color_manual(values = c("grey", "#0F727C"))+
    geom_text_repel(aes(label = selected_geneNames2), max.overlaps = Inf) +
    theme(legend.position= "none", 
          axis.text.x = element_text(face = "bold", color = "black"),
          axis.text.y = element_text(hjust = 1, face = "bold", color = "black"),
          plot.title = element_text(face = "bold", size = rel(1.2), hjust = 0.5), 
          panel.background =element_blank(),
          axis.title = element_text(face = "bold",size = rel(1)), 
          axis.line = element_line(colour="black", size = .8),
          panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"))
  
}
